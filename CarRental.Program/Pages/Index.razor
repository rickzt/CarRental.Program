@page "/"
@using CarRental.Business.Classes;
@using CarRental.Common.Classes;
@using CarRental.Common.Enums;
@inject BookingProcessor bp;
<PageTitle>Car Rental Assignment</PageTitle>

<h1>Car Rental Assignment</h1>

<p>@startTest</p>

<p>Vehicles</p>
<div class="container border border-dark border-1 row">
	<table class="table">
		<thead>
			<tr>
				<th>RegNo</th>
				<th>Make</th>
				<th>Odometer</th>
				<th>Cost/Km</th>
				<th>Vehicle Type</th>
				<th>$/Day</th>
				<th>Status</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var v in bp.GetVehicles())
			{

				<tr class="text text:hover">
					<td>@v.regNr</td>
					<td>@v.maker</td>
					<td>@v.odometer</td>
					<td>@v.costKm</td>
					@if (v is Car car)
					{
						<td>@car.vehicleTypes</td>
					}
					else
					{
						<td>Motorcycle</td>
					}

					<td>@v.costDay</td>
					<td><span class="badge rounded-pill @PillerFargCar(v.vehicleStatuses)">@v.vehicleStatuses</span></td>
				</tr>
			}
		</tbody>
	</table>
</div>
<br />
<p>Bookings</p>
<div class="container border border-dark border-1 row">
	<table class="table">
		<thead>
			<tr>
				<th>RegNo</th>
				<th>Customer</th>
				<th>KM when rented</th>
				<th>KM when returned</th>
				<th>Rented date</th>
				<th>Returned date</th>
				<th>Cost</th>
				<th>Status</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var booking in bookingList)
			{
				<tr class="text text:hover">
					<td>@booking.regNr</td>
					<td>@booking.ssn</td>
					<td>@booking.odometerRent</td>
					<td>@booking.odometerReturn</td>
					<td>@booking.dateRented</td>
					<td>@booking.dateReturned</td>
					<td>@booking.cost</td>
					<td><span class="badge @PillerFargBooking(booking.rentedStatus)">@booking.rentedStatus</span></td>
				</tr>
			}
		</tbody>
	</table>
</div>

<br />
<p>Customers</p>
<div class="container container-small border-dark border-1 border row">
	<table class="table">
		<thead>
			<tr>
				<th>SSN</th>
				<th>Last Name</th>
				<th>First Name</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var customer in customerList)
			{
				<tr class="text text:hover">
					<td>@customer.ssn</td>
					<td>@customer.lastName</td>
					<td>@customer.firstName</td>
				</tr>
			}
		</tbody>
	</table>
</div>

@code {
	List<Car> carList = new List<Car>();
	List<Customer> customerList = new List<Customer>();
	List<Booking> bookingList = new List<Booking>();
	string startTest = "Hej";

	void Test()
	{

		// Skapa variabler av kostnader etc så de går att räkna med
		carList.Add(new Car("ABC123", "Volvo", 1, 7000, VehicleTypes.Combi, 150, VehicleStatuses.Booked));
		carList.Add(new Car("BAC412", "Audi", 1, 5000, VehicleTypes.Sedan, 250, VehicleStatuses.Booked));
		carList.Add(new Car("SKT182", "Ford", 1, 8000, VehicleTypes.Van, 125, VehicleStatuses.Available));
		carList.Add(new Car("QPS991", "Jeep", 1, 3500, VehicleTypes.Combi, 225, VehicleStatuses.Booked));
		carList.Add(new Car("MMA572", "Yamaha", 1, 1250, VehicleTypes.Motorcycle, 275, VehicleStatuses.Available));

		customerList.Add(new Customer(123456, "Svensson", "Jonas"));
		customerList.Add(new Customer(654321, "Andersson", "Andreas"));

		bookingList.Add(new Booking("LGA251", "Johan Enkvist (185235)", 10000, null, "2011/02/02", string.Empty, null, BookingStatuses.Open));
		bookingList.Add(new Booking("PGE501", "Anna Andersson (292452)", 5000, 5500, "2011/02/02", "2011/03/03", 500, BookingStatuses.Closed));
		//bookingList.Add(new Booking("PGE501", "Anna Andersson (292452)", 5000, 5500, new DateTime(2011 - 02 - 02), new DateTime(2011 - 03 - 03), 500, "Open"));
	}


	string PillerFargCar(VehicleStatuses pillerFärg) // Testmetod för att ändra färgen på HTML'en (piller)
	{
		string pillerFärg2 = string.Empty;
		switch (pillerFärg)
		{
			case VehicleStatuses.Available:
				return pillerFärg2 = "bg-primary";

			case VehicleStatuses.Booked:
				return pillerFärg2 = "bg-danger";

			default:
				return string.Empty;
		}

	}
	string PillerFargBooking(BookingStatuses pillerFärg) // Testmetod för att ändra färgen på HTML'en (piller)
	{
		string pillerFärg2 = string.Empty;
		switch (pillerFärg)
		{
			case BookingStatuses.Open:
				return pillerFärg2 = "bg-danger";

			case BookingStatuses.Closed:
				return pillerFärg2 = "bg-success";

			default:
				return string.Empty;
		}

	}

	protected override async Task OnInitializedAsync()
	{
		Test();
		startTest = "Hej, fungerar";
	}
}