@page "/"
@using CarRental.Business.Classes;
@using CarRental.Common.Classes;
@using CarRental.Common.Enums;
@using CarRental.Common.Interfaces;
@using CarRental.Data.Classes;
@inject BookingProcessor bp;
@inject Inputs input;
<PageTitle>Car Rental Assignment</PageTitle>

<h1>Car Rental Assignment</h1>

<div class="btn-group" role="group" aria-label="Basic outlined example">
	<button type="button" class="btn btn-outline-success" @onclick="(() =>input.filteredStatuses=VehicleStatuses.Available)">Available</button>
	<button type="button" class="btn btn-outline-primary" @onclick="(() =>input.filteredStatuses=default)">All</button>
	<button type="button" class="btn btn-outline-danger" @onclick="(()=>input.filteredStatuses=VehicleStatuses.Booked)">Booked</button>
</div>

@if(input.ErrorMessage.Length > 0)
{
<p><div class="w25 alert alert-danger" role="alert">
  @input.ErrorMessage</div></p>

<p>@input.Testmessage</p>
}
<br />
<p>Vehicles</p>
<div class="container border border-dark border-1 row w100">
	<table class="table w100">
		<thead>
			<tr>
				<th class="w13">RegNo</th>
				<th class="w13">Make</th>
				<th class="w13">Odometer</th>
				<th class="w13">$/Km</th>
				<th>Vehicle Type</th>
				<th>$/Day</th>
				<th>Action</th>
				<th>Status</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td class="w13"><input class="w50 form-control" placeholder="RegNo" @bind="input.RegNo" /></td>
				<td class="w13"><input class="w50 form-control" placeholder="Make" @bind="input.Make" /></td>
				<td class="w18"><input class="w50 input-min125 form-control" placeholder="Odometer" type="number" @bind="input.Odometer" /></td>
				<td class="w13"><input class="w50 form-control" placeholder="$/Km" type="number" @bind="input.CostKm" /></td>
				<td class="w50">
				<select class="form-control" @bind="input.VehicleType">
					<option value="" disabled selected hidden>Choose type</option>
					@foreach(var vt in Enum.GetNames(typeof(VehicleTypes))){<option value="@vt">@vt</option>}
				</select>
				</td>
				<td class="w100"><input class="w100 input-min100 form-control" placeholder="$/Day" type="number" @bind="input.CostDay"/></td>
				<td class="align-middle"><button type="button" class="btn btn-sm btn-outline-primary" @onclick="(()=>bp.AddVehicle(input, default))">Add</button></td>
				<td class="align-middle">Status</td>
			</tr>
			@foreach (var v in bp.GetVehicles(input.filteredStatuses)) 
			{
				<tr class="text text:hover">
					<td>@v.Id</td>
					<td>@v.RegNr</td>
					<td>@v.Maker</td>
					<td>@v.Odometer</td>
					<td>@v.CostKm</td>
					<td>@v.GetVehicleTypes()</td>
					<td>$@v.CostDay</td>
					@if (v.VehicleStatuses == VehicleStatuses.Available)
					{
						<td class="align-middle">
						<select @bind="input.customerId">
							<option value="Test" disabled selected hidden></option>
							@foreach (var customer in bp.GetCustomers())
							{
								<option value="@customer.Id">@customer.FirstName @customer.LastName</option>
							}
						</select>
					</td>
						@if (input.customerId != null)
						{<td><button type="button" class="btn btn-sm btn-outline-primary" @onclick="(()=>{bp.RentVehicle((int)v.Id, (int)input.customerId); input.RentedStatus(); input.Distance=null;})">Rent</button></td>}
						else
						{<td><button type="button" class="btn btn-sm btn-outline-primary" disabled>Rent</button></td>}
					}
					else
					{
						<td><input class="form-control" placeholder="Distance" type="number" inputmode="numeric" size="15" @bind="input.Distance"/></td>
						@*<td><input class="form-control" placeholder="Distance" type="number" inputmode="numeric" size="15" @bind="input.Distance" /></td>*@
						<td class="align-middle"><button size="15" type="button" class="btn btn-sm btn-outline-primary" @onclick="(()=>bp.ReturnVehicle((int)v.Id, input.Distance ?? 0))">Return</button></td>
					}
					<td class="align-middle"><span class="badge bg-@((v.VehicleStatuses == VehicleStatuses.Available) ? "primary" : "danger")">@v.VehicleStatuses</span></td>
			</tr>
			}
		</tbody>
	</table>
</div>
<br />
<p>Bookings</p>
<div class="container border border-dark border-1 row">
	<table class="table">
		<thead>
			<tr>
				<th>RegNo</th>
				<th>Customer</th>
				<th>KM when rented</th>
				<th>KM when returned</th>
				<th>Rented date</th>
				<th>Returned date</th>
				<th>Cost</th>
				<th>Status</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var booking in bp.GetBookings())
			{
				<tr class="text text:hover">
					
					<td>@booking.Id</td>
					<td>@booking.RegNr</td>
					<td>@booking.Customer.FirstName @booking.Customer.LastName (@booking.Customer.Ssn)</td>
					<td>@booking.OdometerRent</td>
					<td>@booking.OdometerReturn</td>
					<td>@booking.DateRented.ToShortDateString()</td>
					<td>@booking.DateReturned?.ToShortDateString()</td>
					<td>@booking.GetCost()</td>
					<td><span class="badge bg-@((booking.VehicleStatus == VehicleStatuses.Booked) ? "danger" : "success")">@((booking.VehicleStatus == VehicleStatuses.Booked) ? "Open" : "Closed")</span></td>
				</tr>
			}
		</tbody>
	</table>
</div>

<br />
<p>Customers</p>
<div class="container container-small border-dark border-1 border row">
	<table class="table">
		<thead>
			<tr>
				<th>SSN</th>
				<th>Last Name</th>
				<th>First Name</th>
			</tr>
			<tr>
				<td><input placeholder="SSN" type="number" @bind="input.Ssn" /></td>
				<td><input placeholder="First name" @bind="input.FirstName" /></td>
				<td><input class="w75" placeholder="Last name" @bind="input.LastName" />   <span><button button type="button" class="btn btn-primary btn-sm" @onclick="(()=>bp.AddCustomer(input, default))">+</button></span></td>
			</tr>
		</thead>
		<tbody>
			@foreach (var customer in bp.GetCustomers())
			{
				<tr class="text text:hover">
					@*<td>@customer.Id</td>*@
					<td>@customer.Ssn</td>
					<td>@customer.LastName</td>
					<td>@customer.FirstName</td>
				</tr>
			}
		</tbody>
	</table>
</div>
<p>@bp.GetBooking(2).Id</p>
<p>@bp.GetBooking(2).RegNr</p>
<p>@bp.GetBooking(3).RegNr</p>


@code 
{
	// Finns en todo i bookingprocessor också

	// Prio:
    /*
	 * Exceptions vartdå? (bp, collectiondata?)
	* (x)RentVehicle/Rent metod
	* (x)ReturnVehicle/Return metod
	* (x)Lägg till parse? kanske inte behövs - för int/double inputs - var mass = double.Parse(newMass)
	* Rent-knapp vid bilarna - asynkron metod som fake'ar processing( task.delay(sekunder?) ) - ändra status på vehiclestatus - lägg till i booking
	* (x)Distance knapp med return efter att bilen är hyrd (ändra return odometer till nya) - ändra till closed i booking
	* (x) - går att lägga till nr nu - LÄGG TILL SÅ MAN BARA KAN LÄGGA TILL NR I DISTANCE VID RETUR
	* Vehicle klass - Car/Motorcycle ärver - metoderns läggs i vehicle
	* (x)om man försöker lägga till fordon/kund utan rätt info så ska man skicka felmeddelande "could not add vehicle/could not add customer"
	* (x)^ samma med rent/return knapparna
	*/




	/* Todo:
	 * (X)Customers och Bookings behöver ID property
	 * Try/catch där de passar med error meddelande
	 * regex för inputs av t.ex regnr? -- Kolla videostore uppgiften
	 * */

	/* * Todo:
	 * 
	*
	* Get-Persons-Bookings-Vehicles får inte finnas. Måste vara generiska. En Get metod där man skickar in ett lambda uttryck i parantesen för att filtrera data
	* t.ex Hämta alla personer vars namn är John eller hämta alla bilar med en viss vehicletype
	* Get metoden ska hämta en lista på allt som matchar.
	* Single metod ska hämta EN sak (t.ex person via personnr eller en bil via regnr)
	*
	* en Add metod där man kan lägga till person/bokning/fordon
	*
	* Get - returnerar lista med lambda uttryck (filter)
	* Single - returnerar EN sak med lambra uttryck (filter)
	* Add - lägger till valfri (person, bil, booking)
	*/

	/* Todo:
	 * Extensionmetoder - VehicleExtensions och CollectionExtensions
	 * 
	 */

}