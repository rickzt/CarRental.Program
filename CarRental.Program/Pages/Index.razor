@page "/"
@using CarRental.Business.Classes;
@using CarRental.Common.Classes;
@using CarRental.Common.Enums;
@using CarRental.Common.Interfaces;
@using CarRental.Data.Classes;
@inject BookingProcessor bp;
<PageTitle>Car Rental Assignment</PageTitle>

<h1>Car Rental Assignment</h1>

<div class="btn-group" role="group" aria-label="Basic outlined example">
	<button type="button" class="btn btn-outline-success" @onclick="(() => filteredStatuses=VehicleStatuses.Available)">Available</button>
	<button type="button" class="btn btn-outline-primary" @onclick="(() => filteredStatuses=default)">All</button>
	<button type="button" class="btn btn-outline-danger" @onclick="(()=> filteredStatuses=VehicleStatuses.Booked)">Booked</button>
</div>

<button type="button" class="btn btn-outline-danger" @onclick="TestAddButton">TestAdd</button>
<h1>@message</h1>


<br />
<p>Vehicles</p>
<div class="container border border-dark border-1 row">
	<table class="table">
		<thead>
			<tr>
				<th>RegNo</th>
				<th>Make</th>
				<th>Odometer</th>
				<th>$/Km</th>
				<th>Vehicle Type</th>
				<th>$/Day</th>
				<th>Action</th>
				<th>Status</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><input placeholder="RegNo" @bind="testRegNo"/></td>
				<td><input placeholder="Make" @bind="testMake"/></td>
				<td><input placeholder="Odometer" @bind="testOdometer" /></td>
				<td><input placeholder="$/Km" @bind="testCostKm" /></td>
				<td>
					<select id="cars" name="cars" placeholder="Test" @bind="testVehicleType">
						<option value="" disabled selected hidden>Choose type</option>
						<option value="Combi">@VehicleTypes.Combi</option>
						<option value="Motorcycle">@VehicleTypes.Motorcycle</option>
						<option value="Van">@VehicleTypes.Van</option>
						<option value="Sedan">@VehicleTypes.Sedan</option>
					</select>
				</td>
				<td></td>
				<td>Add button</td>
				<td>Status</td>
			</tr>
			@foreach (var v in bp.GetVehicles(filteredStatuses)) 
			{

				<tr class="text text:hover">
					<td>@v.RegNr</td>
					<td>@v.Maker</td>
					<td>@v.Odometer</td>
					<td>@v.CostKm</td>
					<td>@v.GetVehicleTypes()</td>
					<td>$@v.CostDay</td>
					<td>dropdown+button</td>
					<td><span class="badge bg-@((v.VehicleStatuses == VehicleStatuses.Available) ? "primary" : "danger")">@v.VehicleStatuses</span></td>
				</tr>
			}
		</tbody>
	</table>
</div>
<br />
<p>Bookings</p>
<div class="container border border-dark border-1 row">
	<table class="table">
		<thead>
			<tr>
				<th>RegNo</th>
				<th>Customer</th>
				<th>KM when rented</th>
				<th>KM when returned</th>
				<th>Rented date</th>
				<th>Returned date</th>
				<th>Cost</th>
				<th>Status</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var booking in bp.GetBookings())
			{
				<tr class="text text:hover">
					<td>@booking.RegNr</td>
					<td>@booking.Ssn</td>
					<td>@booking.OdometerRent</td>
					<td>@booking.OdometerReturn</td>
					<td>@booking.DateRented.ToShortDateString()</td>
					<td>@booking.DateReturned?.ToShortDateString()</td>
					<td>@booking.GetCost()</td>
					<td><span class="badge bg-@((booking.RentedStatus == BookingStatuses.Open) ? "danger" : "success")">@booking.RentedStatus</span></td>
				</tr>
			}
		</tbody>
	</table>
</div>

<br />
<p>Customers</p>
<div class="container container-small border-dark border-1 border row">
	<table class="table">
		<thead>
			<tr>
				<th>SSN</th>
				<th>Last Name</th>
				<th>First Name</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var customer in bp.GetCustomers())
			{
				<tr class="text text:hover">
					<td>@customer.Ssn</td>
					<td>@customer.LastName</td>
					<td>@customer.FirstName</td>
				</tr>
			}
		</tbody>
	</table>
</div>

@code {

	VehicleStatuses filteredStatuses = default; 




	string testRegNo = string.Empty;
	string testMake = string.Empty;
	string testOdometer = string.Empty;
	string testCostKm = string.Empty;
	string testVehicleType = string.Empty;

	string message = "Testmeddelande";



	protected override async Task OnInitializedAsync()
	{
		bp.GetVehicles();
	}
	void TestAddButton()
	{
		if (testRegNo != string.Empty && testMake != string.Empty && testOdometer != string.Empty && testCostKm != string.Empty && testVehicleType != string.Empty)
		{
			message = "Not empty";
			Int32.TryParse(testOdometer, out int odometerNumber);


		}
		else
		{
			message = "Empty";
		}
	}
}